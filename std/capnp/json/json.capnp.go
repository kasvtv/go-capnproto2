// Code generated by capnpc-go. DO NOT EDIT.

package json

import (
	math "math"
	strconv "strconv"
	capnp "github.com/kasvtv/go-capnproto2/v2"
	text "github.com/kasvtv/go-capnproto2/v2/encoding/text"
	schemas "github.com/kasvtv/go-capnproto2/v2/schemas"
)

type JsonValue struct{ capnp.Struct }
type JsonValue_Which uint16

const (
	JsonValue_Which_null    JsonValue_Which = 0
	JsonValue_Which_boolean JsonValue_Which = 1
	JsonValue_Which_number  JsonValue_Which = 2
	JsonValue_Which_string_ JsonValue_Which = 3
	JsonValue_Which_array   JsonValue_Which = 4
	JsonValue_Which_object  JsonValue_Which = 5
	JsonValue_Which_call    JsonValue_Which = 6
)

func (w JsonValue_Which) String() string {
	const s = "nullbooleannumberstring_arrayobjectcall"
	switch w {
	case JsonValue_Which_null:
		return s[0:4]
	case JsonValue_Which_boolean:
		return s[4:11]
	case JsonValue_Which_number:
		return s[11:17]
	case JsonValue_Which_string_:
		return s[17:24]
	case JsonValue_Which_array:
		return s[24:29]
	case JsonValue_Which_object:
		return s[29:35]
	case JsonValue_Which_call:
		return s[35:39]

	}
	return "JsonValue_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// JsonValue_TypeID is the unique identifier for the type JsonValue.
const JsonValue_TypeID = 0x8825ffaa852cda72

func NewJsonValue(s *capnp.Segment) (JsonValue, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return JsonValue{st}, err
}

func NewRootJsonValue(s *capnp.Segment) (JsonValue, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return JsonValue{st}, err
}

func ReadRootJsonValue(msg *capnp.Message) (JsonValue, error) {
	root, err := msg.RootPtr()
	return JsonValue{root.Struct()}, err
}

func (s JsonValue) String() string {
	str, _ := text.Marshal(0x8825ffaa852cda72, s.Struct)
	return str
}

func (s JsonValue) Which() JsonValue_Which {
	return JsonValue_Which(s.Struct.Uint16(0))
}
func (s JsonValue) SetNull() {
	s.Struct.SetUint16(0, 0)

}

func (s JsonValue) Boolean() bool {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != boolean")
	}
	return s.Struct.Bit(16)
}

func (s JsonValue) SetBoolean(v bool) {
	s.Struct.SetUint16(0, 1)
	s.Struct.SetBit(16, v)
}

func (s JsonValue) Number() float64 {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != number")
	}
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s JsonValue) SetNumber(v float64) {
	s.Struct.SetUint16(0, 2)
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s JsonValue) String_() (string, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != string_")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s JsonValue) HasString_() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s JsonValue) String_Bytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s JsonValue) SetString_(v string) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetText(0, v)
}

func (s JsonValue) Array() (JsonValue_List, error) {
	if s.Struct.Uint16(0) != 4 {
		panic("Which() != array")
	}
	p, err := s.Struct.Ptr(0)
	return JsonValue_List{List: p.List()}, err
}

func (s JsonValue) HasArray() bool {
	if s.Struct.Uint16(0) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s JsonValue) SetArray(v JsonValue_List) error {
	s.Struct.SetUint16(0, 4)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewArray sets the array field to a newly
// allocated JsonValue_List, preferring placement in s's segment.
func (s JsonValue) NewArray(n int32) (JsonValue_List, error) {
	s.Struct.SetUint16(0, 4)
	l, err := NewJsonValue_List(s.Struct.Segment(), n)
	if err != nil {
		return JsonValue_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s JsonValue) Object() (JsonValue_Field_List, error) {
	if s.Struct.Uint16(0) != 5 {
		panic("Which() != object")
	}
	p, err := s.Struct.Ptr(0)
	return JsonValue_Field_List{List: p.List()}, err
}

func (s JsonValue) HasObject() bool {
	if s.Struct.Uint16(0) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s JsonValue) SetObject(v JsonValue_Field_List) error {
	s.Struct.SetUint16(0, 5)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewObject sets the object field to a newly
// allocated JsonValue_Field_List, preferring placement in s's segment.
func (s JsonValue) NewObject(n int32) (JsonValue_Field_List, error) {
	s.Struct.SetUint16(0, 5)
	l, err := NewJsonValue_Field_List(s.Struct.Segment(), n)
	if err != nil {
		return JsonValue_Field_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s JsonValue) Call() (JsonValue_Call, error) {
	if s.Struct.Uint16(0) != 6 {
		panic("Which() != call")
	}
	p, err := s.Struct.Ptr(0)
	if err != nil {
		return JsonValue_Call{}, err
	}
	return JsonValue_Call{Struct: p.Struct()}, err
}

func (s JsonValue) HasCall() bool {
	if s.Struct.Uint16(0) != 6 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s JsonValue) SetCall(v JsonValue_Call) error {
	s.Struct.SetUint16(0, 6)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewCall sets the call field to a newly
// allocated JsonValue_Call struct, preferring placement in s's segment.
func (s JsonValue) NewCall() (JsonValue_Call, error) {
	s.Struct.SetUint16(0, 6)
	ss, err := NewJsonValue_Call(s.Struct.Segment())
	if err != nil {
		return JsonValue_Call{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// JsonValue_List is a list of JsonValue.
type JsonValue_List struct{ capnp.List }

// NewJsonValue creates a new list of JsonValue.
func NewJsonValue_List(s *capnp.Segment, sz int32) (JsonValue_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return JsonValue_List{l}, err
}

func (s JsonValue_List) At(i int) JsonValue { return JsonValue{s.List.Struct(i)} }

func (s JsonValue_List) Set(i int, v JsonValue) error { return s.List.SetStruct(i, v.Struct) }

func (s JsonValue_List) String() string {
	str, _ := text.MarshalList(0x8825ffaa852cda72, s.List)
	return str
}

// JsonValue_Promise is a wrapper for a JsonValue promised by a client call.
type JsonValue_Promise struct{ *capnp.Pipeline }

func (p JsonValue_Promise) Struct() (JsonValue, error) {
	s, err := p.Pipeline.Struct()
	return JsonValue{s}, err
}

func (p JsonValue_Promise) Call() JsonValue_Call_Promise {
	return JsonValue_Call_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type JsonValue_Field struct{ capnp.Struct }

// JsonValue_Field_TypeID is the unique identifier for the type JsonValue_Field.
const JsonValue_Field_TypeID = 0xc27855d853a937cc

func NewJsonValue_Field(s *capnp.Segment) (JsonValue_Field, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return JsonValue_Field{st}, err
}

func NewRootJsonValue_Field(s *capnp.Segment) (JsonValue_Field, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return JsonValue_Field{st}, err
}

func ReadRootJsonValue_Field(msg *capnp.Message) (JsonValue_Field, error) {
	root, err := msg.RootPtr()
	return JsonValue_Field{root.Struct()}, err
}

func (s JsonValue_Field) String() string {
	str, _ := text.Marshal(0xc27855d853a937cc, s.Struct)
	return str
}

func (s JsonValue_Field) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s JsonValue_Field) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s JsonValue_Field) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s JsonValue_Field) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s JsonValue_Field) Value() (JsonValue, error) {
	p, err := s.Struct.Ptr(1)
	if err != nil {
		return JsonValue{}, err
	}
	return JsonValue{Struct: p.Struct()}, err
}

func (s JsonValue_Field) HasValue() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s JsonValue_Field) SetValue(v JsonValue) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewValue sets the value field to a newly
// allocated JsonValue struct, preferring placement in s's segment.
func (s JsonValue_Field) NewValue() (JsonValue, error) {
	ss, err := NewJsonValue(s.Struct.Segment())
	if err != nil {
		return JsonValue{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// JsonValue_Field_List is a list of JsonValue_Field.
type JsonValue_Field_List struct{ capnp.List }

// NewJsonValue_Field creates a new list of JsonValue_Field.
func NewJsonValue_Field_List(s *capnp.Segment, sz int32) (JsonValue_Field_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return JsonValue_Field_List{l}, err
}

func (s JsonValue_Field_List) At(i int) JsonValue_Field { return JsonValue_Field{s.List.Struct(i)} }

func (s JsonValue_Field_List) Set(i int, v JsonValue_Field) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s JsonValue_Field_List) String() string {
	str, _ := text.MarshalList(0xc27855d853a937cc, s.List)
	return str
}

// JsonValue_Field_Promise is a wrapper for a JsonValue_Field promised by a client call.
type JsonValue_Field_Promise struct{ *capnp.Pipeline }

func (p JsonValue_Field_Promise) Struct() (JsonValue_Field, error) {
	s, err := p.Pipeline.Struct()
	return JsonValue_Field{s}, err
}

func (p JsonValue_Field_Promise) Value() JsonValue_Promise {
	return JsonValue_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type JsonValue_Call struct{ capnp.Struct }

// JsonValue_Call_TypeID is the unique identifier for the type JsonValue_Call.
const JsonValue_Call_TypeID = 0x9bbf84153dd4bb60

func NewJsonValue_Call(s *capnp.Segment) (JsonValue_Call, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return JsonValue_Call{st}, err
}

func NewRootJsonValue_Call(s *capnp.Segment) (JsonValue_Call, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return JsonValue_Call{st}, err
}

func ReadRootJsonValue_Call(msg *capnp.Message) (JsonValue_Call, error) {
	root, err := msg.RootPtr()
	return JsonValue_Call{root.Struct()}, err
}

func (s JsonValue_Call) String() string {
	str, _ := text.Marshal(0x9bbf84153dd4bb60, s.Struct)
	return str
}

func (s JsonValue_Call) Function() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s JsonValue_Call) HasFunction() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s JsonValue_Call) FunctionBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s JsonValue_Call) SetFunction(v string) error {
	return s.Struct.SetText(0, v)
}

func (s JsonValue_Call) Params() (JsonValue_List, error) {
	p, err := s.Struct.Ptr(1)
	return JsonValue_List{List: p.List()}, err
}

func (s JsonValue_Call) HasParams() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s JsonValue_Call) SetParams(v JsonValue_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewParams sets the params field to a newly
// allocated JsonValue_List, preferring placement in s's segment.
func (s JsonValue_Call) NewParams(n int32) (JsonValue_List, error) {
	l, err := NewJsonValue_List(s.Struct.Segment(), n)
	if err != nil {
		return JsonValue_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// JsonValue_Call_List is a list of JsonValue_Call.
type JsonValue_Call_List struct{ capnp.List }

// NewJsonValue_Call creates a new list of JsonValue_Call.
func NewJsonValue_Call_List(s *capnp.Segment, sz int32) (JsonValue_Call_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return JsonValue_Call_List{l}, err
}

func (s JsonValue_Call_List) At(i int) JsonValue_Call { return JsonValue_Call{s.List.Struct(i)} }

func (s JsonValue_Call_List) Set(i int, v JsonValue_Call) error { return s.List.SetStruct(i, v.Struct) }

func (s JsonValue_Call_List) String() string {
	str, _ := text.MarshalList(0x9bbf84153dd4bb60, s.List)
	return str
}

// JsonValue_Call_Promise is a wrapper for a JsonValue_Call promised by a client call.
type JsonValue_Call_Promise struct{ *capnp.Pipeline }

func (p JsonValue_Call_Promise) Struct() (JsonValue_Call, error) {
	s, err := p.Pipeline.Struct()
	return JsonValue_Call{s}, err
}

const schema_8ef99297a43a5e34 = "x\xdat\x91?hSQ\x18\xc5\xcf\xb9\xf7%\xad4" +
	"5\xef\x9aWt\xb0tQ\xd4R\xab-\x05! \xd1" +
	"\x16\x8bt\xea5\xd4M\xedm\xfa\x94\x94\x9b\x97\x924" +
	"\xfe\x99\xba(\xe8\xa0\x82\x8b\x83\xab\x8b\x9d\x1c\x14,*" +
	"\xda\xe2\xa8\x8b(h'\x07\x17\xc1\xc5I\xab\xd6+/" +
	"\xc5\xbeP\xecv\xf9\xbe\xef\x9es\xf8\x1d\xff\xfb11" +
	"\x90\xca\x12\xd0\x99T\xda\xd5V\xfa\xae-\xb8\xbd\xd7\xa1" +
	";(\xdc\xd0\xd9\xfc\xfd\xbbwVo\xe1\x04\xdb\xda\x00" +
	"UYP\x8d}\xc0\xc0\x8d\xdb\x04\xdd\xe4\xd3wG\xbb" +
	"\xae\xbe\xb8\x07\xd5\xc5\xe4cJ\xb4\x01\xb9\x09\xf16g" +
	"\x9a\xaf3\xe2\x12\xe8^\x1fyP\xfc0qy\xf9\x7f" +
	"\xb7o\xc4J\xeec\xf3\xf5\xbey;S\xafF\xfd%" +
	"3\xcbh6?V\xafF\xa7\xb3\xc66B\xdd\xceV" +
	"\x99m\x83-\xfe\xa9\xde\x9e\xd1rh\xa7\xb3#\xc6Z" +
	"\xbd[z\x19\xe7<\x02\xeaq/\xa0\x1fJ\xeag\x82" +
	"\xdd\xfc\xe3\xfc\x80\xf1xq\x18\xd0\x8f$\xf5K\xc1n" +
	"\xb1\xe6\x18P\x00\xeay\x1e\xd0O$\xf5+\xc1N\xf9" +
	"\xdb\x05\x94\x80Z\xca\xab\xa5\x1e\xfdIR\x7f\x15\xec\xf4" +
	"~\xb9\x80\x1e\xa0\xbe\x0c\x02\xfa\xb3\xe4)\x0av\xa6~" +
	"\xba\x80)@\xad\xc5\x12?$\x8bA<N\xaf\xba\x80" +
	"i \xa7\xd8\x0b\x143\x94,\xee\xa2`6jX\x8b" +
	"\xf4\xfcT\xb5jC\x13\x91\x10$X\x88\x1a\x95\xa9\xb0" +
	"\xc6\x0e\x08v\x80\x85\xfa\\\xad\x1c]\xd0\x1e\x85\xfbv" +
	"\xf3\xd0\xce\x1d\x93\x8b\xcb\xd0\x9e\xe0q\x9f\xcc\x00\x8a\xc3" +
	"\xf3\xeb'\xe7\x00f \x98\x01{L\xadf\xaep;" +
	"8.I?a\x0d\xc6\xc3Buj&,\xcd%\xfb" +
	"\x0d\xa2\xeb\xfbl\xc9XK?a\x0b\xd2o\xe9D\xfc" +
	"\xeb$\xae\xa4\x7f\xc4X\xdaqR\xb7K\x0fh\x12?" +
	"0\x06\xe8\xfd\x92zHP\x91\xeb\xbc\x07b*}\x92" +
	"\xfa\xa4\xa0;\xdf\x88Js\xe5j\x84$ta\xd6\xd4" +
	"L\xa5\xbee\xea-\xecG\xcb\xa1\xb4\xd3\x9b\xfc\xe3\xc6" +
	"\xf7H\xea\xc3-\xfe\x07\x07\x93P\xd9\xc8T\xc2\x0dZ" +
	"\x17c\xa1M\x86>\xf87\x00\x00\xff\xffU\xbf\xc8l"

func init() {
	schemas.Register(schema_8ef99297a43a5e34,
		0x8825ffaa852cda72,
		0x9bbf84153dd4bb60,
		0xc27855d853a937cc)
}
